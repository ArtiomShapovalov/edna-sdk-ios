// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target armv7s-apple-ios8.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MFMSPushLite
import Foundation
@_exported import MFMSPushLite
import Swift
import UIKit
import UserNotifications
@objc public protocol PushServerAPIDelegate {
  @objc optional func isProduction(pushServerAPI: MFMSPushLite.PushServerAPI) -> Swift.Bool
  @discardableResult
  @objc func config(pushServerAPI: MFMSPushLite.PushServerAPI) -> MFMSPushLite.PushServerApiConfigDataSource
  @objc optional func onError(pushServerAPI: MFMSPushLite.PushServerAPI, error: Swift.String)
  @objc optional func onDeviceAddressChanged(pushServerAPI: MFMSPushLite.PushServerAPI, deviceAddress: Swift.String)
  @objc optional func onPushMessagesReceived(pushServerAPI: MFMSPushLite.PushServerAPI, messages: [MFMSPushLite.PushNotificationMessage])
}
@objc public protocol PushServerAPINEDelegate : MFMSPushLite.PushServerAPIDelegate {
  @discardableResult
  @objc func deviceAddress(pushServerAPI: MFMSPushLite.PushServerAPI) -> Swift.String?
}
@objc final public class PushNotificationMessage : ObjectiveC.NSObject {
  @objc final public var messageId: Swift.String {
    get
    }
  @objc final public var sentAt: Swift.Int64 {
    get
    }
  @objc final public var read: Swift.Bool
  @objc final public var secured: Swift.Bool {
    get
    }
  @objc final public var shortMessage: Swift.String? {
    get
    }
  @objc final public var fullMessage: Swift.String? {
    get
    }
  @objc final public func markMessageAsRead(_ complete: ((MFMSPushLite.PushServerAPIResponse?) -> ())?) -> MFMSPushLite.PushNotificationMessage
  @objc override dynamic public init()
  @objc deinit
}
extension PushServerAPI {
  @objc dynamic public func forceSync(_ complete: ((MFMSPushLite.PushServerAPIResponse?) -> ())?)
  @objc dynamic public func markMessageAsPushDelivered(_ userInfo: [Swift.AnyHashable : Any]?, complete: (() -> ())?, failure: ((Swift.String) -> ())?)
  @objc dynamic public func markMessageAsPushDelivered(_ serverMessageId: [Swift.String], serverId: Swift.String, complete: (() -> ())?, failure: ((Swift.String) -> ())?)
  @objc dynamic public func markMessagesAsRead(_ messagesIds: [Swift.String], complete: ((MFMSPushLite.PushServerAPIResponse?) -> ())?)
}
@objc public class PushServerAPIResponse : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  @objc public var errorCode: Swift.Int32
  @objc public var errorDescription: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
public typealias didPushMessagesReceived = ((Swift.Array<MFMSPushLite.PushNotificationMessage>) -> ())
public typealias didPushMessagesWereRead = ((Swift.Array<Swift.String>) -> ())
public typealias failureBlockType = ((Swift.String) -> ())
@objc public class PushServerAPI : ObjectiveC.NSObject {
  @objc public static func start()
  @objc public static func setDelegate(_ delegate: MFMSPushLite.PushServerAPIDelegate)
  @objc public static func libVersion() -> Swift.String
  @objc public static var PUSH_API_LOG_ENABLE: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static let `default`: MFMSPushLite.PushServerAPI
  @objc public var onDeviceAddressChanged: ((Swift.String?) -> ())?
  @objc public var onPushMessagesReceived: MFMSPushLite.didPushMessagesReceived?
  @objc public var appPushMessagesReceived: MFMSPushLite.didPushMessagesReceived?
  @objc public var onPushMessagesWereRead: MFMSPushLite.didPushMessagesWereRead?
  @objc public var notificationsWereChanged: ((Swift.Bool) -> ())?
  @objc public var failureBlock: MFMSPushLite.failureBlockType?
  @objc public var deviceAddress: Swift.String? {
    @objc get
  }
  @objc public var deviceUid: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc deinit
}
extension PushServerAPI {
  @objc public static func showNetworkActivity(_ show: Swift.Bool)
  @objc dynamic public func addVoipSuffixToAppPackage(_ suffix: Swift.String)
}
extension PushServerAPI {
  @discardableResult
  @objc dynamic public func isSubscriptionEnabled() -> Swift.Bool
  @objc dynamic public func setSubscriptionEnabled(_ enabled: Swift.Bool)
}
extension PushServerAPI {
  @objc dynamic public func didRegisterForRemoteNotificationsWithDeviceToken(_ deviceToken: Foundation.Data)
  @objc dynamic public func didReceiveRemoteNotification(_ userInfo: [Swift.AnyHashable : Any]?)
  @objc dynamic public func didReceiveLocalNotification(_ userInfo: [Swift.AnyHashable : Any]?)
  @objc dynamic public func didReceiveRemoteNotification(_ userInfo: [Swift.AnyHashable : Any]?, fetchCompletionHandler: @escaping ((UIKit.UIBackgroundFetchResult) -> ()))
  @objc dynamic public func handleActionWithIdentifier(_ identifier: Swift.String?, userInfo: [Swift.AnyHashable : Any], completion: @escaping () -> Swift.Void)
  @objc dynamic public func handleActionWithIdentifier(_ identifier: Swift.String?, userInfo: [Swift.AnyHashable : Any], responseInfo: [Swift.AnyHashable : Any], completion: @escaping () -> Swift.Void)
  @objc dynamic public func didFailToRegisterForRemoteNotificationsWithError(_ error: Foundation.NSError)
  @available(iOS, deprecated: 10.0, message: "Use didUpdateNotificationSettings")
  @objc dynamic public func didRegisterUserNotificationSettings(_ settings: UIKit.UIUserNotificationSettings)
  @objc dynamic public func didUpdateNotificationSettings()
}
@objc final public class SendMessageResponse : MFMSPushLite.PushServerAPIResponse {
  @objc final public var messageId: Swift.String?
  @objc final public var sentAt: Foundation.NSNumber?
  @objc required dynamic public init()
  @objc deinit
}
@objc extension PushServerAPI {
  @objc dynamic public func messageSend(_ content: Swift.String?, systemType: Swift.Bool, complete: ((MFMSPushLite.SendMessageResponse?) -> ())?)
}
@objc public protocol PushServerApiConfigDataSource {
  @objc var providerUid: Swift.String? { get }
  @objc var needAutomaticallyGenerateDeviceUid: Swift.Bool { get }
  @objc var primaryUrlCode: Swift.String? { get }
  @objc var urls: [Swift.String : Swift.String] { get }
}
@objc public class PushServerApiConfig : ObjectiveC.NSObject, MFMSPushLite.PushServerApiConfigDataSource {
  @objc public var providerUid: Swift.String?
  @objc public var needAutomaticallyGenerateDeviceUid: Swift.Bool
  @objc public var primaryUrlCode: Swift.String?
  @objc public var urls: [Swift.String : Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
extension PushServerAPI {
  @objc dynamic public func resetNewMessageCounter(_ complete: ((MFMSPushLite.PushServerAPIResponse?) -> ())?)
}
public typealias MFMSConfigDataSource = MFMSPushLite.PushServerApiConfigDataSource
public typealias MFMSPushLiteConfig = MFMSPushLite.PushServerApiConfig
@objc public protocol MFMSPushLiteDelegate {
  @objc func isProduction(pushApi: MFMSPushLite.MFMSPushLite) -> Swift.Bool
  @objc optional func config(pushApi: MFMSPushLite.MFMSPushLite) -> MFMSPushLite.MFMSConfigDataSource
  @objc optional func onError(pushApi: MFMSPushLite.MFMSPushLite, error: Swift.String)
  @objc optional func onDeviceAddressChanged(pushApi: MFMSPushLite.MFMSPushLite, deviceAddress: Swift.String)
  @objc optional func onPushMessagesReceived(pushApi: MFMSPushLite.MFMSPushLite, messages: [MFMSPushLite.PushNotificationMessage])
}
@objc public protocol MFMSPushLiteAppDelegateProxy {
  @objc func didRegisterForRemoteNotifications(withDeviceToken deviceToken: Foundation.Data)
  @objc func didFailToRegisterForRemoteNotifications(withError error: Swift.Error)
  @objc func didReceiveRemoteNotification(_ userInfo: [Swift.AnyHashable : Any]?, fetchCompletionHandler: @escaping ((UIKit.UIBackgroundFetchResult) -> ()))
  @objc func didReceiveRemoteNotification(_ userInfo: [Swift.AnyHashable : Any]?)
  @available(iOS, deprecated: 10.0, message: "Use didUpdateNotificationSettings")
  @objc func didRegisterUserNotificationSettings(_ settings: UIKit.UIUserNotificationSettings)
  @objc func didUpdateNotificationSettings()
}
@objc final public class MFMSSendMessageResponse : ObjectiveC.NSObject {
  @objc final public var messageId: Swift.String?
  @objc final public var sentAt: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 10.0, *)
public typealias MFMSPushLiteUserNotificationsProxy = UserNotifications.UNUserNotificationCenterDelegate
@objc public class MFMSPushLite : ObjectiveC.NSObject {
  @objc public static func libVersion() -> Swift.String
  @objc public init(delegate: MFMSPushLite.MFMSPushLiteDelegate)
  @objc public var autoRegisterForNotification: Swift.Bool
  @objc public var logEnable: Swift.Bool
  @objc public var showNetworkActivity: Swift.Bool
  @objc public var appPackagePostfix: Swift.String?
  @objc public func registerForRemoteNotification()
  @objc public var deviceAddress: Swift.String? {
    @objc get
  }
  @objc public var deviceUID: Swift.String? {
    @objc get
  }
  @objc public var appDelegate: MFMSPushLite.MFMSPushLiteAppDelegateProxy {
    @objc get
  }
  @available(iOS 10.0, *)
  @objc public var notificationCenter: MFMSPushLite.MFMSPushLiteUserNotificationsProxy {
    @objc get
  }
  @objc public var appGroup: Swift.String?
  @objc public func start()
  @objc public func resetNewMessageCounter(withCompetionHandler competionHandler: (() -> ())?, errorHandler: ((Swift.String) -> ())?)
  @objc public func markMessagesAsRead(messagesIds: [Swift.String], onComplete: (() -> Swift.Void)?, onError: ((Swift.String) -> Swift.Void)?)
  @objc public func sendMessage(_ message: Swift.String, isSystem: Swift.Bool, onComplete: ((MFMSPushLite.MFMSSendMessageResponse) -> Swift.Void)?, onError: ((Swift.String) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
